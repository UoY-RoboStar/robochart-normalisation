
// Initialization of variables, for example, before transformation.
pre {
	// Controls whether debug information is printed.
	var debug = true;
	// Mechanism to invoke native Java method that implements copy with deep cloning.
	var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
	var ecoreUtil = emfTool.ecoreUtil;	
	
}

// We can define operations.
operation printDebug(string) {
	if (debug) {(": "+string).println();}
} 

// The following rule splits a bostm into two. One with a node that has entrypoint = true
// and the respective transitions whose source is this node. The other has the remaining
// nodes and transitions. 
// THIS RULE IS NOT BEING USED because it is not possible to ensure that it will cover an
// entire partition in sequence. As its application turns entrypoints of target states true,
// then the notion of partition is lost. BUT it is expected to be semantically correct.
// We are usingthe other version just as a matter of presentation.  
pattern IntroduceCompositionFromInitialState 
	//s : OpenSTM!RCSeqOpenStateMachine,
	s : RCSeqOpenStateMachine,
	n : Node {
	match: 	(s.right.isKindOf(RCBasicOpenStateMachine)  and 
	        // Using includes here does not work, as Epsilon seem to record several matches for
	        // optimisation, and execute the "do" action without carroying out a new macthing
	        // s.right.nodes.includes(n) and n.isKindOf(EntryPoint) and n.entrypoint = true) and
	        n = s.right.nodes.selectOne(k | k.isKindOf(EntryPoint) and k.entrypoint = true)) and
	      ((s.right.transitions.exists(t | s.right.nodes.includes(t.target))) 
	       or (s.right.nodes.size() > 1)) // Otherwise the Rule is indefinitely applied
	        
	do { 
	    printDebug("Introduce composition from sets of states"); 
        var bostm = new RCBasicOpenStateMachine();
        	printDebug("Adding node '" + n + "'");
            bostm.nodes.add(n);
            // The select expression was 't.target.isKindOf(EntryPoint) and t.source = n', but I do not think
            // it is right to filter on targets that are EntryPoints?
			for (t : Transition in s.right.transitions.select(t|t.source = n)) {
				printDebug("Adding transition '" + t + "' from '" + t.source + "' to '" + t.target + "'");
			    t.target.entrypoint = true;
			    bostm.transitions.add(t);
			}
		var sright = new RCSeqOpenStateMachine();	
	    sright.left = bostm;
	    sright.right = s.right;
		// Finally, the right argument of the original SeqOSTM s is replaced with s1 
		s.right = sright;

	
		if (debug) {
		    printDebug("......Left Component........");
			for (ts in sright.left.transitions) {
				printDebug("Transition '" + ts.name + "' from '" + ts.source.name +  "' to '" + ts.target.name + "' (action: " + ts.action + ", trigger: "+ ts.trigger +")");
			}
			for (n : EntryPoint in sright.left.nodes) {
				printDebug("Node = " + n.name + " Entrypoint = " + n.entrypoint);
			}
			printDebug("......Right Component........");
			for (ts in sright.right.transitions) {
				printDebug("Transition '" + ts.name + "' from '" + ts.source.name +  "' to '" + ts.target.name + "' (action: " + ts.action + ", trigger: "+ ts.trigger +")");
			}
			for (n : EntryPoint in sright.right.nodes) {
				printDebug("Node = " + n.name + " Entrypoint = " + n.entrypoint);
			}
			
		}
	}
}
