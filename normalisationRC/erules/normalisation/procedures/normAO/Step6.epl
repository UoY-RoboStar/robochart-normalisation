import "../../../common/RoboChart.eol";
// Initialization of variables, for example, before transformation.
pre {
	// Controls whether debug information is printed.
	var debug = true;
	var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
	var ecoreUtil = emfTool.ecoreUtil;
	
	//operations
	var usedOpSig = new Set(Source!OperationSig);
	//var usedOpsNames = new Set(String);
	//clocks
	var usedClocksNames = new Set(String);
	
	//variables
	var usedVarsNames = new Set(String);
	var usedVarsEvParameters = new Set(Source!VariableList); 
	var usedVarsParameters; 
	var usedVarsParametersCl;

	//events
	var usedEvsNames = new Set(String);
	
	var functions = new Set(String);
	for (f in Source!Function){
	      functions.add(f.name);
	      //printDebug("functions " + f.name);
		}
		
    //var mapOps = new Map(String,Source!OperationDef);
    var softOps = new Set(Source!OperationDef);
	for (ctrl in Source!ControllerDef.all) {
		softOps.addAll(collectSoftwareOperations(ctrl));
		printDebug("softOpsDef  : " + softOps);
	}
}

operation usedVars(s:Source!Statement) {
   

    usedVarsNames = new Set(String);
    usedVarsParameters = new Set(Source!Parameter);
    usedVarsParametersCl = new Set(Source!Parameter);
    var usedVarList = new Set(Source!VariableList);
	
	// Compute all objects of the metamodel that are contained by transitivity in s.
	var statementContents = s.closure(x|x.eContents());
	
	// We calculate two sets, the variables in a 'VarRef' and those in a 'RefExp'.
	var varrefs = statementContents.select(y:Source!VarRef|true).collect(z:Source!VarRef|z.name).asSet();
	var varexps = statementContents.select(y:Source!RefExp|not(y.ref.isTypeOf(Source!Function))).collect(z:Source!RefExp|z.ref).asSet();
	var commInput = statementContents.select(x:Source!Communication|x._type == CommunicationType#INPUT).collect(z:Source!Communication|z).asSet();
	// An Interface is a BasicContext, which can have sequences of VariableList elements,
	// so we create a new VariableList and add this to the sequence.
	
	//Parameters
	var parexps = statementContents.select(y:Source!RefExp|y.ref.isTypeOf(Source!Parameter)).collect(z:Source!RefExp|z.ref).asSet();
	printDebug(" parexps " + parexps);	  
	
	var variableList = new Source!VariableList();
	var constantList = new Source!VariableList();
	
	variableList.modifier = Source!VariableModifier#VAR;	// Variables
	constantList.modifier = Source!VariableModifier#CONST; 	// Constants
	
	//It is used to store the parameters (variables) of a input communication 
	var varsCommInput = new Set(Source!Variable);
	if (commInput.notEmpty()){
	    for (inp in commInput){
	        //printDebug(" s.communication.parameter " + inp.parameter);
	        varsCommInput.add(inp.parameter);
		    //printDebug("varsCommInput " + varsCommInput);     
	    }  
	}		
	   
	for (v in (varrefs+varexps+varsCommInput+parexps)){ 
	       
	       
	       if (v.isTypeOf(Source!Parameter)){
	         var newPar = ecoreUtil.copy(v);
	         usedVarsParameters.add(v);
	         usedVarsParametersCl.add(newPar);
	         for (refexp in statementContents.select(x:Source!RefExp|x.ref = v)) {
				refexp.ref = newPar;
				printDebug(" v.isTypeOf(Source!Parameter) " + refexp.ref + "" + refexp);
			}
	         
	       } 
	         
	       else { 
	       
	       var newVar = ecoreUtil.copy(v);
	       usedVarsNames.add(newVar.name);
	       
	       if (v.modifier == Source!VariableModifier#VAR){
			variableList.vars.add(newVar);
			//printDebug(" v.modifier == Source!VariableModifier#VAR ");
			}
		   else{
			constantList.vars.add(newVar);
			//printDebug(" v.modifier == const ");
			}	       
			
	        // Update all variable references to the old variable declaration 'v' => newVar.
			for (varref in statementContents.select(x:Source!VarRef|x.name = v)) {
				varref.name = newVar;
				//printDebug(" newVar " + newVar);
			}
			// Update all expression references to the old variable declaration 'v' => newVar.
			for (refexp in statementContents.select(x:Source!RefExp|x.ref = v)) {
				refexp.ref = newVar;
				//printDebug(" refexp newVar " + newVar);
			}
			for (commInput in statementContents.select(x:Source!Communication|x._type == CommunicationType#INPUT
			        and x.parameter = v)) {
			          commInput.parameter = newVar;
		    }
			}
		
	    }
	    
	 // In principle, we could add empty lists.. but here we make sure not to do so.
	if (variableList.vars.size > 0) {
		usedVarList.add(variableList);
	} else {
		delete variableList;
	}
	
	if (constantList.vars.size > 0){
		usedVarList.add(constantList);
	} else {
		delete constantList;
	}
	
	printDebug(" usedVarList " + usedVarList);
	return usedVarList;

   
}

operation usedOps(s:Source!Statement) {

    var usedOps = new Set(Source!OperationSig);
    usedOpSig = new Set(Source!OperationSig);
    //usedOpsNames = new Set(String);
	// Compute all objects of the metamodel that are contained by transitivity in s.
	var statementContents = s.closure(x|x.eContents());
	var contents = statementContents.select(y:Source!Call|true).collect(z:Source!Call|z.`operation`).asSet();
	
	for (op in contents){
	    
		var newOpSig = ecoreUtil.copy(op);
        	
		for (stmt in statementContents.select(x:Source!Call|x.`operation` = op)) {
			stmt.`operation` = newOpSig;
		}
		//Adding newOpSig
		usedOps.add(newOpSig);
		usedOpSig.add(newOpSig);
		//usedOpsNames.add(newOpSig.name);
		
      } 
   return usedOps;
       
}

operation usedClocks(s:Source!Statement){

  var usedClocks = new Set(Source!Clock);
  usedClocksNames = new Set(String);
  
  // Compute all objects of the metamodel that are contained by transitivity in s.
  var statementContents = s.closure(x|x.eContents());
  var contents = statementContents.select(x:Source!ClockReset|true).collect(z:Source!ClockReset|z.clock).asSet();  
  
  for (c in contents){
      // Create the new clock declaration
	  var newClock = ecoreUtil.copy(c);   
      // Replace all clock references
		for (stmt in statementContents.select(x:Source!ClockReset|x.clock = c)) {
		    //printDebug("t.clock " + t.clock);
			stmt.clock = newClock;
		}
		
	  usedClocks.add(newClock);
	  usedClocksNames.add(newClock.name);
  }
  
  if (s.isKindOf(Source!ClockReset)){
     printDebug("s.isKindOf(Source!ClockReset) " + s.clock.name);
     var newClock = ecoreUtil.copy(s.clock);
     s.clock = newClock;
     usedClocks.add(newClock);
     usedClocksNames.add(newClock.name);
  }
  
  return usedClocks;
}

operation usedEvents(s:Source!Statement) {
	
	var usedEvents = new Set(Source!Event);
	usedEvsNames = new Set(String);
	// Compute all objects of the metamodel that are contained by transitivity in s.
	var statementContents = s.closure(x|x.eContents());
	var contents = statementContents.select(x:Source!Communication|true).collect(z:Source!Communication|z.event).asSet();
    printDebug("contents " + contents);
    //var contentsComm = statementContents.select(x:Source!Communication|true).collect(z:Source!Communication|z).asSet();
    //printDebug("contentsComm " + contentsComm);
    
    for (ev in contents) {
        //printDebug("ev " + ev);
        
        var newEvent = ecoreUtil.copy(ev);
		//printDebug("newEvent " + newEvent);
		for (stmt in statementContents.select(x:Source!Communication|x.event = ev)) {
			stmt.event = newEvent;
		}	
//		for (stmt in statementContents.select(x:Source!Communication|x.event = comm.event)) {
//			stmt.event = newEvent;
//		}
		usedEvents.add(newEvent);
		usedEvsNames.add(newEvent.name);
		//event has parameter
		//printDebug("ev parameter " + ev.parameter);
		/*
		if (comm._type == CommunicationType#INPUT){
		   printDebug("comm._type == CommunicationType#INPUT ");
           printDebug("parameter " + comm.parameter);
           var variableList = new Source!VariableList();
	       variableList.modifier = Source!VariableModifier#VAR;
	       var newVar = ecoreUtil.copy(comm.parameter);
	       usedVarsNames.add(newVar.name);
		   variableList.vars.add(newVar);
		   usedVarsEvParameters.add(variableList);
		   for (stmt in statementContents.select(x:Source!Communication|x.event = comm.event)) {
		   printDebug("comm.event " + comm.event);
			comm.parameter = newVar;
		   }    
        }
     */	
    }
   printDebug(" usedEvents " + usedEvents); 
   return usedEvents;
	/*
	var usedEvents = new Set(Source!Event);
	usedEvsNames = new Set(String);
	// Compute all objects of the metamodel that are contained by transitivity in s.
	var statementContents = s.closure(x|x.eContents());
	var contents = statementContents.select(x:Source!Communication|true).collect(z:Source!Communication|z.event).asSet();

    for (ev in contents) {
        //printDebug("ev " + ev);	
        var newEvent = ecoreUtil.copy(ev);
		//printDebug("newEvent " + newEvent);	
		for (stmt in statementContents.select(x:Source!Communication|x.event = ev)) {
			stmt.event = newEvent;
		}
		usedEvents.add(newEvent);
		usedEvsNames.add(newEvent.name);
    }
    
   return usedEvents;
*/
	
}

operation reqVarsOps(s:Source!Statement) {

    var variableList = new Source!VariableList();
	var constantList = new Source!VariableList();
	
	variableList.modifier = Source!VariableModifier#VAR;	// Variables
	constantList.modifier = Source!VariableModifier#CONST; 	// Constants
	
    var reqVarsOps = new Set(Source!VariableList);
   
    var softOpNames = collectSoftwareOperationsName();
    var softOps = collectSoftwareOperations();
   
    for(op in usedOpSig){
          if (softOpNames.includes(op.name)){
            var operationDef = softOps.selectOne(opDef:Source!OperationDef|opDef.name.equals(op.name));          
            var reqInterfaces = operationDef.rInterfaces.select(i|i.variableList.size()>0).asSet();
            for (r in reqInterfaces){ 
		      	for (vl in r.variableList){
		      	  for (v in vl.vars){
		      	  	if (not usedVarsNames.includes(v.name)){
		      	    	printDebug("usedVarsNames.includes(v.name) " + v.name);
		      	    	var newVar = ecoreUtil.copy(v);
		      	    	if (v.modifier == Source!VariableModifier#VAR)
							variableList.vars.add(newVar);
		   	            else
							constantList.vars.add(newVar);	 
		      	    	usedVarsNames.add(newVar.name);
		          }
		        } 
		 
		      }
       
          }
           // In principle, we could add empty lists.. but here we make sure not to do so.
			if (variableList.vars.size > 0) {
				reqVarsOps.add(variableList);
			} else {
				delete variableList;
			}
	
			if (constantList.vars.size > 0){
				reqVarsOps.add(constantList);
			} else {
				delete constantList;
			}
       }
    
   }
   return reqVarsOps;
       
}


operation reqClocksOps(s:Source!Statement) {

    var reqClocksOpS = new Set(Source!Clock);
    var softOps = collectSoftwareOperations();
    var softOpNames = collectSoftwareOperationsName();
    printDebug("In reqClocksOps: softOpNames " + softOpNames);
    printDebug("In reqClocksOps: usedOpSig " + usedOpSig);
    for(op in usedOpSig){
          if (softOpNames.includes(op.name)){
            var operationDef = softOps.selectOne(opDef:Source!OperationDef|opDef.name.equals(op.name));          
            var reqInterfaces = operationDef.rInterfaces.select(i|i.clocks.size()>0).asSet();
               for (r in reqInterfaces){                
       		      	for (cl in r.clocks){
    		      	  	if (not usedClocksNames.includes(cl.name)){
  		      	  	    	var newClk = ecoreUtil.copy(cl);
		      	        	reqClocksOpS.add(newClk);
		      	        	usedClocksNames.add(newClk.name);
    		          }
  		             
		        } 
 		      
			}
         
       }
    
   }
   return reqClocksOpS;
       
}

operation defEvOps(s:Source!Statement) {
	
    var defEvOps = new Set(Source!Event);
    var softOps = collectSoftwareOperations();
    var softOpNames = collectSoftwareOperationsName();
   
     for(op in usedOpSig){
          if (softOpNames.includes(op.name)){
            var operationDef = softOps.selectOne(opDef:Source!OperationDef|opDef.name.equals(op.name));  
            var interfaces = operationDef.interfaces.select(i|i.events.size()>0).asSet();
               for (i in interfaces){                
       		      	for (ev in i.events){
    		      	  	if (not usedEvsNames.includes(ev.name)){
  		      	  	      var newEv = ecoreUtil.copy(ev);
		      	          defEvOps.add(newEv);
		      	          usedEvsNames.add(newEv.name);
    		          }
		        } 	      
			}
			for (ev in operationDef.events){
			//printDebug(" local ev " + ev.name);
			   if (not usedEvsNames.includes(ev.name)){
  		      	  	  var newEv = ecoreUtil.copy(ev);
		      	      defEvOps.add(newEv);
		      	      usedEvsNames.add(newEv.name);
    		    }
			
			}
       }
    
   }
   return defEvOps;
}

// Complex rule to replace actions in transitions of non-basic operations to a new operation
pattern intro_call_for_act_transition
	pkg : Source!RCPackage
		guard: pkg.name.asString().startsWith(clonepackagename),
	opDef : Source!OperationDef from: pkg.operations,     
	t 	: Source!Transition from: opDef.transitions
	{
	// When the transition does not have a simple statement. 
	match: not(t.action = null) and not (opDef.name = "waitOp") and not (opDef.name = "waitInterval") and not (opDef.name = "tStop") and
	  (   (   ( (t.action.isTypeOf(Source!Skip)) or (t.action.isTypeOf(Source!CommunicationStmt))
	        or (t.action.isTypeOf(Source!Assignment)) or (t.action.isTypeOf(Source!ClockReset)) 
	       // or (t.action.isTypeOf(Source!Wait) )
	        ) //and t.action.duration.isKindOf(Source!IntegerExp)
	       and  opDef.transitions.size() > 1) or  
	             (opDef.transitions.size() == 1 and ( (not(t.trigger=null) and not(t.trigger._type = TriggerType#EMPTY)) 
	                   or not(t.condition=null))) )
	            
	do {
		printDebug("Step 6 - NormAO "
		+ " Begin - Replace Actions In Transitions Of An Operation By Operations" );
		printDebug("opDef.name " + opDef.name + " t.name " + t.name + " t.action " + t.action );
	
	    ////////////////////////////////////////////////////////////////////////////////////////////////
		// Create a interfaces to hold new declarations for variables/operations/events used by this t.action.
		var req_s 	= new Source!Interface();
		var defEvents_s	= new Source!Interface();
		
		req_s.name 	=  "req_" + opDef.name + "_" + t.source.name + "_" +  t.name;
	    defEvents_s.name 	= "defEvents_" + opDef.name + "_" + t.source.name + "_" +  t.name;
		
		usedVarsNames = new Set(String);
		//Capturing the variables used by s
		var usedVars = usedVars(t.action);	
		/*Capturing the (software and platform) operations used by s
		  and for each software operation (IOpS) in usedOps, 
		  we need to compute its required variables and clocks required by op, and theirs defined events
        */
		var usedOps = usedOps(t.action);		
		var usedClocks = usedClocks(t.action);		
		var reqVarsOps = reqVarsOps(t.action);		
		var reqClocksOps = reqClocksOps(t.action);		
		var usedEvents = usedEvents(t.action);		
		var defEvOps = defEvOps(t.action);
	
		
		if (usedVars.notEmpty()) { req_s.variableList.addAll(usedVars); }
		if (usedOps.notEmpty()) {req_s.operations.addAll(usedOps); }
		if (usedClocks.notEmpty()) {req_s.clocks.addAll(usedClocks); }
		if (reqVarsOps.notEmpty()) { req_s.variableList.addAll(reqVarsOps); }
		if (reqClocksOps.notEmpty()) {req_s.clocks.addAll(reqClocksOps); }
		if (usedEvents.notEmpty()) {defEvents_s.events.addAll(usedEvents);}
		if (defEvOps.notEmpty()) {defEvents_s.events.addAll(defEvOps);}
				
		////////////////////////////////////////////////////////////////////////////////////////////////-		
		// Create the new operation
		var OpS 	= new Source!OperationDef();
		//OpS.name 	= opDef.name + "_" + t.source.name + "_" + t.name + "_op";
		var lastIndOf_ = opDef.name.lastIndexOf("_");
		var nmOp = opDef.name.substring(0,lastIndOf_);
		OpS.name 	= setName(opDef,t.source,t);//setName("normal",smb.name,t.source.name,t.name,"op");
		
		// The operation has an Initial junction and a Final state.
		var OpS_I 	= new Source!Initial();
		OpS_I.name	= "i";
		var OpS_F 	= new Source!Final();
		OpS_F.name 	= "f";

		//op.name 	= opDef.name + "_" + t.source.name + "_" + t.name + "_op";
		//opSig.name 	= opDef.name + "_" + t.source.name + "_" + t.name + "_op";
		
		// It has a single transition (OpS_tr) from OpS_I to OpS_F
		var OpS_tr = new Source!Transition();
		OpS_tr.name	  = "t";
		OpS_tr.source = OpS_I;
		OpS_tr.target = OpS_F;
		OpS_tr.action = t.action;
						
		//Adding OpS_I and OpS_F to the set of nodes of OpS
		OpS.nodes.addAll(Set{OpS_I,OpS_F});
		//Adding OpS_tr to the set of transitions ofOpS
		OpS.transitions.add(OpS_tr);
		
		//Dealing with parameters
		var seqPars = new Sequence(Sorce!Parameter);
		var seqParsOpSig = new Sequence(Sorce!Parameter);
		if(usedVarsParametersCl.notEmpty()){
		  
		  for (p in opDef.parameters){
		     for (np in usedVarsParametersCl){
		       if (p.name.equals(np.name)){
		         var parOpSig = ecoreUtil.copy(np);
		         seqPars.add(np);
		         seqParsOpSig.add(parOpSig);
		         //printDebug("p.name.equals(np.name) " + np + " " + np.name + " " + np.type );
		       }
		     }
		  }
		
		   OpS.parameters.addAll(seqPars);
		   //printDebug("OpS.parameters " + OpS.parameters);
		}
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		//Creating the new signature for OpS
		var OpSig 	= new Source!OperationSig();
		OpSig.name 	= OpS.name;
		//Adding the parameters for OpSig
		if(seqParsOpSig.notEmpty()){
		   OpSig.parameters.addAll(seqParsOpSig);
		}
		
		// Declaring an interface that contains OpS		
		var IOpS = new Source!Interface();
		IOpS.name = "I_" + OpS.name;
		IOpS.operations.add(OpSig);
		
		
		
		// Delete the required and defined interfaces of OpS if they are empty.
		// otherwise, we make them required by OpS,
		// and introduce them in the package
		if (req_s.variableList.notEmpty() or req_s.operations.notEmpty() or req_s.clocks.notEmpty()){
		   OpS.rInterfaces.add(req_s);
		   pkg.interfaces.add(req_s);
       }
		else 
		   delete req_s;
		
		if (defEvents_s.events.notEmpty()){
		   OpS.interfaces.add(defEvents_s);
		   pkg.interfaces.add(defEvents_s); 
		}
		else
		   delete defEvents_s;
		   
		// Add OperationDef to current package.
		pkg.operations.add(OpS);
		// Add interface to current package.
		pkg.interfaces.add(IOpS);
		// Make this interface required by smb.
		opDef.rInterfaces.add(IOpS);
		
		// Introduce a Call to OpS.
		var OpSCall = new Source!Call();
		OpSCall.`operation` = OpSig;
		t.action = OpSCall;	 
		//This call may have arguments, so we need to create a new RefExp for each one of them
		if (usedVarsParameters.notEmpty()){
		var seqArgs = new Sequence(Sorce!Expression);
		   for (p in opDef.parameters){
		     for (np in usedVarsParameters){
		       if (p.name.equals(np.name)){
		         var refExp = new Source!RefExp();
		         refExp.ref = np;
		         seqArgs.add(refExp);
		         //printDebug("opsig args " + np + " " + np.name + " " + np.type );
		         //printDebug("opsig refexp " + refExp  );
		       }
		     }
		     }
		  t.action.args.addAll(seqArgs);
		}
	    ////////////////////////////////////////////////////////////////////////////////////////////////-	
		// For each ControllerDef in the set of all controllers 'c' in context (Source!ControllerDef)
		// for which the 'machines' attribute contains 'stm' or references 'stm', then introduce a
		// OperationRef element whose 'ref' attribute points to 'op'.
		for ( c : Source!ControllerDef 
				in select(c:Source!ControllerDef|c.lOperations.exists(op|getOperation(op)==opDef))) 
		{
			var opRef 	= new Source!OperationRef();
			opRef.ref 	= OpS;
			opRef.name	= c.name + "_ref_" + OpS.name;
			c.lOperations.add(opRef);
			printDebug("Adding reference to operation in controller '" + c.name + "'");
		}
		
		
		
		
		
		if (debug)
		{
			printDebug("End - Replace Actions In Transitions Of An Operation By Operations");
			printDebug("New operation '" + OpS.name + " Parent operation " + opDef.name + "' (action: " + t.action + ")");
			
			//for (ts in op.transitions) {
			//	printDebug("Transition '" + ts.name + "' from '" + ts.source.name +  "' to '" + ts.target.name + "' (action: " + ts.action + ")");
			//}
		}
	}
}



