
// Initialization of variables, for example, before transformation.
pre {
	// Controls whether debug information is printed.
	var debug = true;
	// Mechanism to invoke native Java method that implements copy with deep cloning.
	var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
	var ecoreUtil = emfTool.ecoreUtil;
	
}

// We can define operations.
operation printDebug(string) {
	if (debug) {(": "+string).println();}
}

// The following rule splits a bostm into two or more: one for each node with entrypoint = true
// and the respective transitions whose source is this node. 

pattern IntroduceCompositionFromSetsOfStates 
	s : OpenSTM!RCSeqOpenStateMachine {
	match: 	s.right.isKindOf(OpenSTM!RCBasicOpenStateMachine)  and 
	        (s.right.transitions.exists(t | s.right.nodes.includes(t.target))
	        or  s.right.nodes.size() > 1) // Otherwise the Rule is indefinitely applied
	do { 
	    // sright contains the subtree with all the nodes with entrypoint true and their
	    // respective transitions. Each such a node gives rise to a RC_BOSTM
	    printDebug(" s.right " + s.right);
	    for (n in s.right){
	    	printDebug(" s.right nodes " + n.nodes);
	    	printDebug(" s.right transitions " + n.transitions);
	    }
	    var sright = new RCSeqOpenStateMachine();
	    var next = sright;
	    var previous;
        for (n : Node in s.right.nodes.select(n | n.isKindOf(EntryPoint) and n.entrypoint = true)) {
        	// one bostm is created for each node which is an entrypoint 
        	// together with its source transitions (but not the target of these transitions)
        	var bostm = new RCBasicOpenStateMachine();
        	printDebug("Adding node '" + n + "'");
            bostm.nodes.add(n);
            // The select expression was 't.target.isKindOf(EntryPoint) and t.source = n', but I do not think
            // it is right to filter on targets that are EntryPoints?
			for (t : Transition in s.right.transitions.select(t|t.source = n)) {
				printDebug("Adding transition '" + t + "' from '" + t.source + "' to '" + t.target + "'");
			    t.target.entrypoint = true;
			    bostm.transitions.add(t);
			}	  
		    // At this point s.right contains the rest of the OSTM and a new composition is built with
		    // bostm and s.right			 
		    next.left = bostm;
		    next.right = new RCSeqOpenStateMachine();
		    previous = next; 
		    next = next.right;
		  		  
		}

	    previous.right = s.right;
		// Finally, the right argument of the original SeqOSTM s is replaced with s1 
		s.right = sright;
/*
		
		if (debug) {
		    printDebug("......Left Component........");
			for (ts in s.right.left.transitions) {
				printDebug("Transition '" + ts.name + "' from '" + ts.source.name +  "' to '" + ts.target.name + "' (action: " + ts.action + ", trigger: "+ ts.trigger +")");
			}
			for (n : EntryPoint in s.right.left.nodes) {
				printDebug("Node = " + n.name + " Entrypoint = " + n.entrypoint + "Node " + n);
			}
			printDebug("......Right Component........");
			if (s.right.right.transitions == null) {
			   printDebug("Is Null"); }
			else { printDebug("Not Null"); }
			for (ts in s.right.right.transitions) {
				printDebug("Transition '" + ts.name + "' from '" + ts.source.name +  "' to '" + ts.target.name + "' (action: " + ts.action + ", trigger: "+ ts.trigger +")");
			}
			for (n : EntryPoint in s.right.right.nodes) {
				printDebug("Node = " + n.name + " Entrypoint = " + n.entrypoint + "Node " + n);
			}
			
		}*/

	}
}
