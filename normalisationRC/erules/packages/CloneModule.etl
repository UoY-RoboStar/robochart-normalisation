import "Packages.eol";

pre {
	// Controls whether debug information is printed.
	var debug = true;
	
	// EcoreUtil for deep-copying.
	var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
	var ecoreUtil = emfTool.ecoreUtil;
	
	// RoboChart2Sim tools
	var tool = new Native("circus.robocalc.robochart2sim.textual.tools.Util");
	
	// This is necessary to allow Xtext to serialize contents to disk
	// when cross-referenced elements are all over the place, namely
	// in different resources, including those in the context of the Editor.
	//
	// See: https://www.eclipse.org/forums/index.php?t=msg&th=1102302&goto=1821112&#msg_1821112	
	//
	// Sadly, because ANT tasks are loaded by a different class loader
	// it is not feasible to do this initialization in an ANT task.
	// Therefore, we do it here explicitly. Perhaps if there were a
	// way to communicate with the Eclipse plug-in directly it may
	// be achievable, but always indirectly.
	//
	var rs = Clone.getResource().getResourceSet();
	printDebug("Giving live scope");
	tool.giveLiveScope(rs);
}

operation findRCPackage(o:Any) {
	if (o.isTypeOf(Original!RCPackage)) {
		return o;
	} else if (o<>null) {
		if (o.eContainer()<>null)
			return findRCPackage(o.eContainer());
		else
			printDebug("Null eContainer of: " + o);
	}
}

post {
/*	printDebug("//-[Saving resources]//-");
	
	// Here we save all resources in the context of Clone's resourceSet back to disk.
	
	for (p in Clone!RCPackage.all) {
		printDebug("Saving : " + p.eResource().getURI());
		p.eResource().save(null);
	}
	
	printDebug("//-[End of Saving resources]//-");*/
}

// The following is a rule over packages. Note that we do not restrict its 
// applicability to packages containing a specific module, because in general
// we are interested in cloning packages related to a module by transitivity
// of containment or references.
//
// In theory, we would need to explicitly restrict the applicability of this
// rule to take into account the transitive closure of containment as above.
// In practice, however, this ETL program is currently only used with a specific
// module given as a parameter 'robochartmodule' and RoboChart does not support
// defining subpackages, so we are guaranteed to clone only the right packages.
//
// NOTE:
// However, currently we may copy more contents in a package that are unrelated.
// To solve this requires calculating the above closure.
//
// FIXME: I think we do not copy any more than required at the moment.
rule Package2Package
	transform o : Original!RCPackage
	to t : Clone!RCPackage {
		guard: 	not ignoredPackage(o) 
			// An attempt to exclude erroneous packages as a last resort.
			and not o.eResource().getURI().toString().startsWith(projecturi + "out/")
			// The package must have at least one of module/controller/machine/operation
			// Because we currently do not copy data types and functions, this
			// restriction combined with the transitive loading of the resources
			// should approximate the transitive closure of depenencies well.
			 and (o.modules.size > 0 or o.machines.size > 0 or o.controllers.size > 0 
			or o.operations.size > 0)
		
		printDebug("Cloning from \t: '" + o.name + "' ('" + o.eResource().getURI() + "')");
		
		// We give the new package a unique name, based on parameter
		// 'clonepackagename' and the original 'o.name'.
		t.name = clonepackagename + "_" + o.name;
		
		
		// We only clone the chosen module.
		// NOTE: We could ask the user interactively.
		t.modules = o.modules.select(m|m.name = robochartmodule).equivalent();
		t.machines = o.machines.equivalent();
		
		// Controllers are cloned too, as they may contain StateMachineDefs.
		t.controllers = o.controllers.equivalent();
		
		// Robotic platforms are cloned too
		t.robots = o.robots.equivalent();
		
		// Imports are not cloned, because they may need to change as the result
		// of cloning other elements of RoboChart. So we fix them later below.
		//t.imports = o.imports.equivalent();
		
		// Operations are OperationDefs, so they too need to be cloned.
		t.operations = o.operations.equivalent();
		
		//Interfaces (added MSCF)  why??
		t.interfaces = o.interfaces.equivalent();
		
		// We calculate the new URI.
		var projectURI = o.eResource().getURI().createURI(projecturi);
		var outfolderURI = o.eResource().getURI().createURI(outputfolder);
		// We replace the prefix.
		var newURI = o.eResource().getURI().replacePrefix(projectURI,outfolderURI);
		newURI = newURI.trimFileExtension();
		newURI = newURI.appendFileExtension("rct");//xmi
		printDebug("newURI: " + newURI.toString());
		t.~newURI = newURI;
		
		
		
		
		//printDebug("projectURI: " + projectURI);
		//printDebug("resourceURI: " + o.eResource().getURI());
		
		//t.~visisted = true;
		
		// An attempt at 're-importing things' which are not in this package!
		// This is needed for RefExps, which do not admit Fully Qualified Names, unfortunately.
		//
		// This may need to be revised if imports concerning enumerated types and so forth fail.
		var refExps = t.closure(x|x.eContents()).select(y:Clone!RefExp|y.ref<>null  and findRCPackage(y.ref)<>t); //and (not ContainedInInterface(y.ref))
		var enumExps = t.closure(x|x.eContents()).select(y:Clone!EnumExp|findRCPackage(y.type)<>t);

		//var refExps = t.closure(x|x.eContents()).select(y:Clone!RefExp|y.ref.eResource().getURI().fileExtension=="rct");
		
		//printDebug("Fixing imports");
		
		var impSet = new Set(String);
		for (p in refExps) {
			var pkg = findRCPackage(p.ref);
			//printDebug(">>> Referenced: " + p.ref);
			if (pkg <> null and pkg.name <> null)
			impSet.add(pkg.name + "::" + p.ref.name);
		}
		
		for (p in enumExps) {
			var pkg = findRCPackage(p.type);
			//printDebug(">>> Referenced: " + p.type);
			if (pkg <> null and pkg.name <> null)
			impSet.add(pkg.name + "::" + p.type.name);
		}
		
		for (i in impSet) {
			var imp = new Clone!Import;
			imp.importedNamespace = i;
			t.imports.add(imp);
			//printDebug("import " + i);
		}
		
		var rsset = t.eResource().getResourceSet();
		
		// If the new URI is different from that originally set,
		// it means that this is an RCPackage whose '.rct' should
		// be stored somewhere else.
		//
		// So we create a new Resource, with the newURI, and add 't' to it.
		//
		// WARNING: This does not behave as expected if Clone has been
		// 			loaded with the cache option set to true. Epsilon
		//			implements its own cache, which evicts elements when
		//			they are moved into a new resource. Sadly, it does
		// 			not seem straightforward to add them back, so no cache! :(
		if (t.~newURI <> t.eResource().getURI()) {
			var rs = rsset.createResource(t.~newURI,null);
			rs.getContents().add(t);
		}
		printDebug("Cloning to \t: '" + t.name + "' ('" + t.eResource().getURI() + "')");
	}
		
@abstract
rule NamedElement
	transform s : Original!NamedElement
	to t : Clone!NamedElement {
		t.name = s.name;
	}

rule Module2Module
	transform s : Original!RCModule
	to t : Clone!RCModule {
		//printDebug("Cloning module '" + s.name + "'");
		t.name = s.name;
		t.nodes = s.nodes.equivalent();
		
		// If the Module contains an OperationDef, then the connections have to be copied
		// in a different way. Note that the check below relies on the fact that a module
		// has exactly one RoboticPlatform (either RoboticPlatformDef or RoboticPlatformRef)
		t.connections = s.connections.equivalent();
	/*	if (s.nodes.exists(i:Original!RoboticPlatformDef|true)) {
			t.connections = s.connections.equivalent("Connection2Connection");
		} else {
			t.connections = s.connections.equivalent("Connection2Connection_noEvent_copy");
		}
    */
	}

@lazy	
rule RoboticPlatformDef 
	transform s : Original!RoboticPlatformDef
	to t : Clone!RoboticPlatformDef
	extends Context, NamedElement
	{

	}	

@lazy	
rule RoboticPlatformRef2RoboticPlatformRef 
	// Is there a way to do this on the base type 'Reference', instead of duplicating the rules? 
	transform s : Original!RoboticPlatformRef
	to t : Clone!RoboticPlatformRef
	extends NamedElement {
		// Note no use of equivalent() here, because we do not duplicate a robotic platform,
		// instead we copy the reference.
		t.ref = s.ref.equivalent();
	}

rule ControllerRef2ControllerRef 
	transform s : Original!ControllerRef
	to t : Clone!ControllerRef
	extends NamedElement {
		t.ref = s.ref.equivalent();
	}
	
rule StateMachineRef2StateMachineRef
	transform s : Original!StateMachineRef
	to t : Clone!StateMachineRef 
	extends NamedElement {
		t.ref = s.ref.equivalent();
	}

/*
@lazy
rule Connection2Connection_noEvent_copy
	transform s : Original!Connection
	to t : Clone!Connection {
		printDebug("Connection2Connection_noEvent_copy [" + s.from.name + " on "+ s.efrom.name +"] -> [" + s.`to`.name + " on "+ s.eto.name +"]");
		t.from = s.from.equivalent();
		t.`to` = s.`to`.equivalent();
		t.efrom = s.efrom;//.equivalent();
		t.eto = s.eto;//.equivalent();
		t.`async` = s.`async`;
		t.`bidirec` = s.`bidirec`;
	}
*/
	
@lazy
rule Event
	transform s : Original!Event
	to t : Clone!Event
	extends NamedElement {
		//printDebug("Cloning Event: " + s.name);
		t.type = s.type; // this is a ref, so clone?
		t.broadcast = s.broadcast;
	}
	
@lazy
rule Connection2Connection
	transform s : Original!Connection
	to t : Clone!Connection {
		//printDebug("Connection2Connection [" + s.from.name + " on "+ s.efrom.name +"] -> [" + s.`to`.name + " on "+ s.eto.name +"]");
		t.from = s.from.equivalent();
		t.`to` = s.`to`.equivalent();
		
		// TODO: Replicate this everywhere events are used!!
		//
		// To decide whether an event is being cloned or not we need to examine its context:
		//
		// If the context is an interface, we do not clone it, we simply copy the 'reference'.
		// If the context is a Def element (RoboticPlatformDef, ControllerDef, StateMachineDef, and whatnot), we clone it
		// via a call to equivalent.
		
		t.efrom = s.efrom.equivalent();
		/*
		if (ContainedInInterface(s.efrom)) {
			//printDebug("Interface kind");
			t.efrom = s.efrom;
		} else {
			t.efrom = s.efrom.equivalent();//.equivalent();
		}
        */
		
		t.eto = s.eto.equivalent();
		
		/*
		if (ContainedInInterface(s.eto)) {
			//printDebug("Interface kind");
			t.eto = s.eto;
		} else {
			t.eto = s.eto.equivalent();//.equivalent();
		}
*/	
		
		//t.efrom = s.efrom.equivalent();//.equivalent();
		//t.eto = s.eto.equivalent();//.equivalent();
		t.`async` = s.`async`;
		t.`bidirec` = s.`bidirec`;
	}
		 
rule ControllerDef2ControllerDef
	transform s : Original!ControllerDef
	to t : Clone!ControllerDef
	extends Context, NamedElement
	{
		//printDebug("ControllerDef2ControllerDef: " + s.name);
		// These attributes are specific to ControllerDef
		t.machines = s.machines.equivalent(); // Why isn't equivalents right here?
		
		//MSCF
		//t.lOperations = s.lOperations.clone();
		t.lOperations = s.lOperations.equivalent();
		//
		t.connections = s.connections.equivalent();
		
		// These are now taken care of by the rule for Context, apart from
		// operations, which we explicitly copy.
		//t.operations = s.operations.clone();
		//t.events = s.events.equivalent();
		//t.variableList = s.variableList.equivalent();
		//t.events = s.events.clone();
		//t.interfaces = s.interfaces.clone();
	}
	

	
@abstract
rule TypedNamedElement
	transform s : Original!TypedNamedElement
	to t : Clone!TypedNamedElement
	{
	    t.type = s.type;
	
	}
	
rule SetType
  transform s : Original!SetType
	to t : Clone!SetType
	{
     t.domain = s.domain.equivalent();
    }
	
@lazy
rule Variable
	transform s : Original!Variable
	to t : Clone!Variable
	extends NamedElement, TypedNamedElement
	{
		//printDebug("Cloning Variable: " + s.name + "s=" + s);
		if (s.initial <> null){
		   t.initial = s.initial.equivalent();
		   }
	}
	
@lazy
rule VariableList
	transform s : Original!VariableList
	to t : Clone!VariableList
	{
	
		t.modifier = s.modifier;
		t.vars = s.vars.equivalent();
		//printDebug("Cloned VariableList: t.vars" + t.vars + "s.vars" + s.vars);
	}
	
@abstract
rule NodeContainer
	transform s : Original!NodeContainer
	to t : Clone!NodeContainer
	{
		t.nodes = s.nodes.equivalent();
		t.transitions = s.transitions.equivalent();
	}
	
rule State
	transform s : Original!State
	to t : Clone!State
	extends NodeContainer, NamedElement
	{
		//printDebug("Rule State: " + s.name);
		t.actions = s.actions.equivalent();
	}
	
// Statements

@abstract
rule Action
	transform s : Original!Action
	to t : Clone!Action
	{
		t.action = s.action.equivalent();
	}
	
rule EntryAction
	transform s : Original!EntryAction
	to t : Clone!EntryAction
	extends Action
	{ //printDebug("EntryAction"); 
	}

rule DuringAction
	transform s : Original!DuringAction
	to t : Clone!DuringAction
	extends Action
	{ }

rule ExitAction
	transform s : Original!ExitAction
	to t : Clone!ExitAction
	extends Action
	{ }		

rule SeqStatement
	transform s : Original!SeqStatement
	to t : Clone!SeqStatement
	{
		t.statements = s.statements.equivalent();
	}
	
rule SendStatement
	transform s : Original!CommunicationStmt
	to t : Clone!CommunicationStmt
	{
		t.communication = s.communication.equivalent();
		if (t.communication._type == null)
		 t.communication._type = CommunicationType#OUTPUT;
		 // Otherwise ambiguous for serializer.. obviously!
	}
	
rule ParStmt 
	transform s : Original!ParStmt
	to t : Clone!ParStmt
	{
		t.stmt = s.stmt.equivalent();
	}
	
rule IfStmt
	transform s : Original!IfStmt
	to t : Clone!IfStmt
	{
		t.expression = s.expression.equivalent();
		t.then = s.then.equivalent();
		t.`else` = s.`else`.equivalent();
	}
	
rule Assignment
	transform s : Original!Assignment
	to t : Clone!Assignment
	{
		//printDebug("Left Assignment");
		t.left = s.left.equivalent();
		//printDebug("After Left Assignment: t.left=" + t.left);
		t.right = s.right.equivalent();
		//printDebug("After Right Assignment: t.right=" + t.right);
	}
	
// Assignable
rule VarRef
	transform s : Original!VarRef
	to t : Clone!VarRef
	{
		// If it's in an interface, we simply copy reference,
		// we do not copy the variable itself.
		t.name = s.name.equivalent();
		/*
		if (ContainedInInterface(s.name)) {
			//printDebug("Interface kind");
			t.name = s.name;
		} else {
			t.name = s.name.equivalent();
		}
*/
		//printDebug("t.name = " + t.name + " s.name= " + s.name);
	}
	
rule VarSelection
	transform s : Original!VarSelection
	to t : Clone!VarSelection
	{
		//printDebug("VarSelection");
		//printDebug("s.receiver " + s.receiver);
		t.receiver = s.receiver.equivalent();
		t.member = s.member;
	}
	
// Members
@lazy
rule Field
	transform s : Original!Field
	to t : Clone!Field
	{
	}

	
rule ArrayAssignable
	transform s : Original!ArrayAssignable
	to t : Clone!ArrayAssignable
	{
	//printDebug("ArrayAssignable");
		t.value = s.value.equivalent();
		t.parameters = s.parameters.equivalent();
	}	
	
rule Skip
	transform s : Original!Skip
	to t : Clone!Skip
	{
	}

rule Wait
	transform s : Original!Wait
	to t : Clone!Wait
	{
		t.duration = s.duration.equivalent();
	}

	
rule TimedStatement
	transform s : Original!TimedStatement
	to t : Clone!TimedStatement
	{
		//t.start = s.start.equivalent();
		t.stmt = s.stmt.equivalent();
		t.deadline = s.deadline.equivalent();
	}


/*	
rule EndStatement
	transform s : Original!EndStatement
	to t : Clone!EndStatement
	{
		//t.start = s.start.equivalent();
		t.stmt = s.stmt.equivalent();
		t.deadline = s.deadline.equivalent();
	}*/
	
rule Call
	transform s : Original!Call
	to t : Clone!Call
	{
	    //printDebug(" call " +  s);
		t.`operation` = s.`operation`.equivalent(); //added equivalent()
		t.args = s.args.equivalent();
	}

rule ClockReset
	transform s : Original!ClockReset
	to t : Clone!ClockReset
	{
		t.clock = s.clock.equivalent();
	}

// Expressions


rule ResultExp
	transform s : Original!ResultExp
	to t : Clone!ResultExp
	{}
	
rule ArrayExp
	transform s : Original!ArrayExp
	to t : Clone!ArrayExp
	{ 
		t.value = s.value.equivalent();
		t.parameters = s.parameters.equivalent();
	}
	
rule ClockExp
	transform s : Original!ClockExp
	to t : Clone!ClockExp
	{
		t.clock = s.clock.equivalent();
	}
	
rule Clock
	transform s : Original!Clock
	to t : Clone!Clock
	extends NamedElement
	{
		
	}
	
rule StateClockExp 
	transform s : Original!StateClockExp
	to t : Clone!StateClockExp
	{
		t.state = s.state.equivalent();
	}

@abstract
rule BinaryExpression
	transform s : Original!BinaryExpression
	to t : Clone!BinaryExpression
	{
		t.left = s.left.equivalent();
		t.right = s.right.equivalent();
	}

rule Iff
	transform s : Original!Iff
	to t : Clone!Iff
	extends BinaryExpression 
	{}
	
rule Implies
	transform s : Original!Implies
	to t : Clone!Implies
	extends BinaryExpression 
	{}
	
rule Or
	transform s : Original!Or
	to t : Clone!Or
	extends BinaryExpression 
	{}
	
@abstract
rule QuantifierExpression
	transform s : Original!QuantifierExpression
	to t : Clone!QuantifierExpression
	{
		t.variables = s.variables.equivalent();
		t.suchthat = s.suchthat.equivalent();
		t.predicate = s.predicate.equivalent();
	}
	
rule Forall
	transform s : Original!Forall
	to t : Clone!Forall
	extends QuantifierExpression
	{}
	
rule Exists
	transform s : Original!Exists
	to t : Clone!Exists
	extends QuantifierExpression
	{
		t.unique = s.unique;
	}
	
rule LambdaExp
	transform s : Original!LambdaExp
	to t : Clone!LambdaExp
	{
		t.variables = s.variables.equivalent();
		t.suchthat = s.suchthat.equivalent();
		t.expression = s.expression.equivalent();
	}
	
rule DefiniteDescription
	transform s : Original!DefiniteDescription
	to t : Clone!DefiniteDescription
	extends LambdaExp
	{}
	
rule IfExpression
	transform s : Original!IfExpression
	to t : Clone!IfExpression
	{
		t.condition = s.condition.equivalent();
		t.ifexp = s.ifexp.equivalent();
		t.elseexp = s.elseexp.equivalent();
	}
	
rule LetExpression
	transform s : Original!LetExpression
	to t : Clone!LetExpression
	{
		t.declarations = s.declarations.clone();
		t.expression = s.expression.equivalent();
	}
	
rule ParExp
   transform s : Original!ParExp
	to t : Clone!ParExp
	{
	 t.exp = s.exp.equivalent();
	}
	
rule And
	transform s : Original!And
	to t : Clone!And
	//extends BinaryExpression
	{
	t.left = s.left.equivalent();
		t.right = s.right.equivalent();
	}
	
rule Not
	transform s : Original!Not
	to t : Clone!Not
	{
		t.exp = s.exp.equivalent();
	}
	
rule InExp
	transform s : Original!InExp
	to t : Clone!InExp
	{
		t.member = s.member.equivalent();
		t.set = s.set.equivalent();
	}	
	
rule TypeExp
	transform s : Original!TypeExp
	to t : Clone!TypeExp
	{
		t.type = s.type;
	}
	
rule Equals
	transform s : Original!Equals
	to t : Clone!Equals
	extends BinaryExpression
	{
	}
	
rule Different
	transform s : Original!Different
	to t : Clone!Different
	extends BinaryExpression
	{
	}
	
rule GreaterThan
	transform s : Original!GreaterThan
	to t : Clone!GreaterThan
	extends BinaryExpression
	{
	}
	
rule GreaterOrEqual
	transform s : Original!GreaterOrEqual
	to t : Clone!GreaterOrEqual
	extends BinaryExpression
	{
	}
	
rule LessThan
	transform s : Original!LessThan
	to t : Clone!LessThan
	//extends BinaryExpression
	{
	t.left = s.left.equivalent();
		t.right = s.right.equivalent();
	}
	
rule LessOrEqual
	transform s : Original!LessOrEqual
	to t : Clone!LessOrEqual
	extends BinaryExpression
	{
	}	
	
rule Plus
	transform s : Original!Plus
	to t : Clone!Plus
	extends BinaryExpression
	{
	}
	
rule Minus
	transform s : Original!Minus
	to t : Clone!Minus
	extends BinaryExpression
	{
	}	
	
rule Modulus
	transform s : Original!Modulus
	to t : Clone!Modulus
	extends BinaryExpression
	{
	}
								
rule Mult
	transform s : Original!Mult
	to t : Clone!Mult
	extends BinaryExpression
	{
	}

rule Div
	transform s : Original!Div
	to t : Clone!Div
	extends BinaryExpression
	{
	}

rule Cat
	transform s : Original!Cat
	to t : Clone!Cat
	extends BinaryExpression
	{
	}

rule Neg
	transform s : Original!Neg
	to t : Clone!Neg
	{
		t.exp = s.exp.equivalent();
	}
	
rule Selection
	transform s : Original!Selection
	to t : Clone!Selection
	{
		t.receiver = s.receiver.equivalent();
		t.member = s.member;
	}
	
@abstract
rule LiteralExp
	transform s : Original!Expression
	to t : Clone!Expression
	{
		t.value = s.value;
	}

rule IntegerExp
	transform s : Original!IntegerExp
	to t : Clone!IntegerExp
	extends LiteralExp
	{
	}
	
rule FloatExp
	transform s : Original!FloatExp
	to t : Clone!FloatExp
	extends LiteralExp
	{
	}	
	
rule StringExp
	transform s : Original!StringExp
	to t : Clone!StringExp
	extends LiteralExp
	{
	}	
	
rule BooleanExp
	transform s : Original!BooleanExp
	to t : Clone!BooleanExp
	extends LiteralExp
	{
	}	

rule VarExp 
	transform s : Original!VarExp
	to t : Clone!VarExp
	{
		//printDebug("VarExp");
		t.value = s.value.equivalent();
	}
	
operation ContainedInInterface(o:Any) {
	
	if (o.eContainer().isTypeOf(Original!VariableList)) {
		return ContainedInInterface(o.eContainer());
	} else {
		return o.eContainer().isTypeOf(Original!Interface);
	}
}	
	
@lazy
rule RefExp 
	transform s : Original!RefExp
	to t : Clone!RefExp
	{

		// References are copied if not for Events/Variables which are not in an interface.
		if (s.ref.isTypeOf(Original!Event) or s.ref.isTypeOf(Original!Variable))
		{
		//printDebug("if RefExp " + s.ref);
		t.ref = s.ref.equivalent();
		/*
			if (ContainedInInterface(s.ref)) {
				t.ref = s.ref;
				//printDebug("Copied [1] s.ref to t.ref");
			} else {
	//			if (s.ref.name == "ZERO_STEER") {
	//				printDebug("Seeking equivalent for " + s.ref.name);
	//				printDebug("s.ref.eContainer() = " + s.ref.eContainer());
	//			}
				t.ref = s.ref.equivalent();
				//printDebug("Seeking equivalent: s: " + s + " t: " + t);
				//printDebug("Equivalent points to: " + t.ref);
				
			}
*/
		} else {
		//printDebug("else RefExp");
			t.ref = s.ref;//.equivalent();
			//t.ref = s.ref.equivalent();
			//printDebug("Copied [2] s.ref to t.ref");
		}
	}
	
rule ToExp 
	transform s : Original!ToExp
	to t : Clone!ToExp
	{
	}	
	
rule FromExp 
	transform s : Original!FromExp
	to t : Clone!FromExp
	{
	}	
	
rule IdExp 
	transform s : Original!IdExp
	to t : Clone!IdExp
	{
	}	
		
rule AsExp 
	transform s : Original!AsExp
	to t : Clone!AsExp
	{
		t.exp = s.exp.equivalent();
		t.type = s.type;
	}			

rule IsExp 
	transform s : Original!IsExp
	to t : Clone!IsExp
	{
		t.exp = s.exp.equivalent();
		t.type = s.type;
	}

rule EnumExp 
	transform s : Original!EnumExp
	to t : Clone!EnumExp
	{
		t.type = s.type;
		t.literal = s.literal;
	}	
	
rule ParExp 
	transform s : Original!ParExp
	to t : Clone!ParExp
	{
		t.exp = s.exp.equivalent();
	}
	
rule SeqExp 
	transform s : Original!SeqExp
	to t : Clone!SeqExp
	{
		t.values = s.values.equivalent();
	}

rule SetExp 
	transform s : Original!SetExp
	to t : Clone!SetExp
	{
		t.values = s.values.equivalent();
	}
	
rule SetComp 
	transform s : Original!SetComp
	to t : Clone!SetComp
	{
		t.variables = s.variables.equivalent();
		t.predicate = s.predicate.equivalent();
		t.expression = s.expression.equivalent();
	}
	
rule SetRange 
	transform s : Original!SetRange
	to t : Clone!SetRange
	{
		t.start = s.start.equivalent();
		t.end = s.end.equivalent();
	}
	
rule TupleExp 
	transform s : Original!TupleExp
	to t : Clone!TupleExp
	{
		t.values = s.values.equivalent();
	}
	
rule RangeExp
	transform s : Original!RangeExp
	to t : Clone!RangeExp
	{
		t.linterval = s.linterval;
		t.lrange = s.lrange.equivalent();
		t.rrange = s.rrange.equivalent();
		t.rinterval = s.rinterval;
	}
	
rule CallExp
	transform s : Original!CallExp
	to t : Clone!CallExp
	{
	   // printDebug(" CallExp " + s.`function`);
		t.`function` = s.`function`.equivalent();
		t.args = s.args.equivalent();
	}
	
rule ElseExp
	transform s : Original!ElseExp
	to t: Clone!ElseExp
	{
	}

//

rule Initial
	transform s : Original!Initial
	to t : Clone!Initial
	extends NamedElement
	{ }
	
rule Junction
	transform s : Original!Junction
	to t : Clone!Junction
	extends NamedElement
	{ }
	
rule Final
	transform s : Original!Final
	to t : Clone!Final
	extends NamedElement
	{ }	
	
@lazy
rule Transition
	transform s : Original!Transition
	to t : Clone!Transition
	extends NamedElement
	{
		t.source = s.source.equivalent();
		t.target = s.target.equivalent();
		//t.start = s.start;
		if (s.trigger <> null) { t.trigger = s.trigger.equivalent();} else { t.trigger = null; }
		t.reset = s.reset.equivalent();
		t.deadline = s.deadline.equivalent();
		t.condition = s.condition.equivalent();
		t.action = s.action.equivalent();
	}
	
@lazy
rule Communication
	transform s : Original!Communication
	to t : Clone!Communication
	{
	t.event = s.event.equivalent();
		/*
		if (s.event <> null and s.event.eContainer() <> null and s.event.eContainer().isTypeOf(Original!Interface)) {
			//printDebug("Interface kind");
			t.event = s.event;
		} else if (s.event <> null) {
			t.event = s.event.equivalent();
		}*/
	
		// NOTE: The serializer is especially sensitive about triggers, because of back-tracking,
		// so need to ensure attributes are only set to match the textual language.
		/*if (s._type == TriggerType#INPUT or
			s._type == TriggerType#OUTPUT or
			s._type == TriggerType#SYNC or
			s._type == TriggerType#SIMPLE) */
			if (s._type == CommunicationType#INPUT or
			s._type == CommunicationType#OUTPUT or
			s._type == CommunicationType#SYNC or
			s._type == CommunicationType#SIMPLE)
			{
			
			// TODO: I think more of these need to be equivalent calls
			//if (s._from <> null)
			//{	t._from = s._from;}
				
			//if (s._predicate <> null)
			//{	t._predicate = s._predicate; }
				
			if //(s._type == TriggerType#INPUT)
			 (s._type == CommunicationType#INPUT)
			{	
			   //t.parameter = s.parameter; 
			   //printDebug("t.parameter = s.parameter.equivalent");
			   t.parameter = s.parameter.equivalent();
			   // printDebug("t.parameter " + t.parameter);
			}
				
			if ((s._type == CommunicationType#OUTPUT or s._type == CommunicationType#SYNC))
			{	t.value = s.value.equivalent(); }
				
			//if (s.time <> null)
			//{	t.time = s.time; }
			
			//if (s.reset <> null)
			//{	t.reset = s.reset.clone();}
		
			if (s._type <> null)
			{	t._type = s._type;}
		}

	}
	
@lazy
rule Parameter
transform s : Original!Parameter
		to t : Clone!Parameter
		extends NamedElement,TypedNamedElement{
		//printDebug( "Parameter " + s + s.name);
		//printDebug( "Parameter " + t + t.name);
}	
	
@abstract
rule Context
	transform s : Original!Context
	to t : Clone!Context
	{
		t.events = s.events.equivalent();
		t.interfaces = s.interfaces.equivalent();
		t.pInterfaces = s.pInterfaces.equivalent();
		t.rInterfaces = s.rInterfaces.equivalent();
		t.variableList = s.variableList.equivalent();
		t.operations = s.operations.equivalent();
	}	
	
@abstract
rule StateMachineBody
	transform s : Original!StateMachineBody
	to t : Clone!StateMachineBody
	extends Context, NodeContainer, NamedElement
	{		
		//t.operations = s.operations.equivalent();
		// Clocks are specific to StateMachineBody
		t.clocks = s.clocks.equivalent(); 
	}	
	
rule StateMachineDef2StateMachineDef
	transform s : Original!StateMachineDef
	to t : Clone!StateMachineDef
	extends StateMachineBody
	{
		//printDebug("StateMachineDef2StateMachineDef: " + s.name);
	}


rule OperationRef2OperationRef
	transform s : Original!OperationRef
	to t : Clone!OperationRef
	extends NamedElement {
		t.ref = s.ref.equivalent();
	
		//printDebug("OperationRef2OperationRef: ");
		//t.`operation` = s.`operation`;
		/*'uses' interfaces+=[Interface|QualifiedName] |
			'provides' pInterfaces+=[Interface|QualifiedName] |
			'requires' rInterfaces+=[Interface|QualifiedName] |
			variableList+=VariableList |
			events+=Event |
			nodes+=Node |
			transitions+=Transition |
			clocks+=Clock
        */
        //t.transitions = s.transitions.equivalent();
	}	
	
@lasy	
rule OperationDef2OperationDef
	transform s : Original!OperationDef
	to t : Clone!OperationDef
	extends StateMachineBody
	{
		
        //MSCF added
	    t.terminates = s.terminates;
	    //printDebug("OperationDef parameters: " + s.parameters);
	    t.parameters = s.parameters.clone();
	    //.equivalent();
	    //t.parameters = s.parameters.clone();
	
	}
	
	
@abstract
rule ContextOp
	transform s : Original!Context
	to t : Clone!Context
	{
		t.events = s.events.equivalent();
		t.interfaces = s.interfaces.equivalent(); //clone();
		t.pInterfaces = s.pInterfaces.equivalent(); //clone();
		t.rInterfaces = s.rInterfaces.equivalent(); //clone();
		t.variableList = s.variableList.equivalent();
		t.clocks = s.clocks.equivalent(); //clone();
		t.operations = s.operations.equivalent();
	}
	
// We do not copy OperationDef's in a RCPackage //Why?

//MSCF (added)
@lazy
rule Interface2Interface
   transform s : Original!Interface
	to t : Clone!Interface
	extends NamedElement
	{
	

  t.operations = s.operations.equivalent();
  t.events = s.events.equivalent();
  t.variableList = s.variableList.equivalent();
  t.clocks = s.clocks.equivalent();
  //printDebug("Interface2Interface " + t.name + " " + t.variableList);

}

@lasy
rule OperationSig2OperationSig
 transform s : Original!OperationSig
	to t : Clone!OperationSig
	extends NamedElement{
	//printDebug("OperationSig2OperationSig");
	
	t.parameters = s.parameters.clone();
	//.equivalent();
	//.clone();
	//MSCF added
	t.terminates = s.terminates;
	}